import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getUsers } from "../../services/userAPI";

const initialState = {
  status: "idle",
  userList: [],
};

export const getUsersAsync = createAsyncThunk(
  "userList/getUsers",
  async (_, thunkApi) => {
    try {
      const response = await getUsers();
      console.log('response', response);
      return response;
    } catch (error) {
      return thunkApi.rejectWithValue(error);
    }
  }
);

 const userSlice = createSlice({
  name: "userSlice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [getUsersAsync.pending]: (state) => {
      state.status = "pending";
    },
    [getUsersAsync.fulfilled]: (state, action) => {
      const { payload } = action;
      state.status = "fulfilled";
      console.log('payload', payload);
      state.users = payload;
    },
    [getUsersAsync.rejected]: (state, action) => {
      console.log('action', action.payload);
      state.status = "rejected";
    },
  },
});

export const selectUsers = (state) => state.userItem.userList;

export default userSlice.reducer;
